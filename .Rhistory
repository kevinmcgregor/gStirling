for (i in 1:n.chain) {
lines(s.p[[i]]$gamma, ylim=y.rge, col=col[[i]])
}
abline(h=conc.top, col="black", lty=2, lwd=2)
# Prior hyper-params
p.shape = sqrt(5)
p.scale = sqrt(5)
library(parallel)
n.chain <- 4
Y.list <- vector("list", n.chain)
for (i in 1:n.chain) Y.list[[i]] <- Y
s.p <- mclapply(Y.list, b_sampler, p.shape = p.shape, p.scale = p.scale,
n.iter=1000, n.burn=200, mc.cores=1)#n.chain)
par(mfrow=c(1,1), mar=rep(2,4))
tmp <- unlist(lapply(s.p, function(x) {x$gamma}))
y.rge <- range(tmp, conc.top)
plot(s.p[[1]]$gamma, type="l", ylim=y.rge, col=col[1])
for (i in 1:n.chain) {
lines(s.p[[i]]$gamma, ylim=y.rge, col=col[[i]])
}
abline(h=conc.top, col="black", lty=2, lwd=2)
source('/mnt/GREENWOOD_JBOD1/GREENWOOD_BACKUP/home/kevin.mcgregor/research/pitman_yor/battiston_sampler/R/b_sampler.R', echo=TRUE)
gc()
source("~/research/pitman_yor/battiston_sampler/R/b_sampler.R")
source("~/research/pitman_yor/basic_py/R/hpy_functions.R")
plot.dir <- "/mnt/GREENWOOD_BACKUP/home/kevin.mcgregor/research/pitman_yor/battiston_sampler/plots/fixed_params"
# Sampling from HPY
N <- 1000
J <- 25
conc.top <- 5
dsct.top <- 0.1
conc.local <- rep(50, J)
dsct.local <- rep(0.3, J)
s.hpy <- sample_hpy(J, rep(N, J), conc.top, dsct.top, conc.local, dsct.local)
Y <- s.hpy$abund
# Prior hyper-params
p.shape = sqrt(5)
p.scale = sqrt(5)
# Running Battiston sampler
s <- b_sampler(Y, 1000, 200, p.shape = p.shape, p.scale = p.scale)
source('/mnt/GREENWOOD_JBOD1/GREENWOOD_BACKUP/home/kevin.mcgregor/research/pitman_yor/battiston_sampler/R/b_sampler.R', echo=TRUE)
# Running Battiston sampler
s <- b_sampler(Y, 1000, 200, p.shape = p.shape, p.scale = p.scale)
library(parallel)
n.chain <- 4
Y.list <- vector("list", n.chain)
for (i in 1:n.chain) Y.list[[i]] <- Y
s.p <- mclapply(Y.list, b_sampler, p.shape = p.shape, p.scale = p.scale,
n.iter=1000, n.burn=200, mc.cores=1)#n.chain)
par(mfrow=c(1,1), mar=rep(2,4))
tmp <- unlist(lapply(s.p, function(x) {x$gamma}))
y.rge <- range(tmp, conc.top)
plot(s.p[[1]]$gamma, type="l", ylim=y.rge, col=col[1])
for (i in 1:n.chain) {
lines(s.p[[i]]$gamma, ylim=y.rge, col=col[[i]])
}
abline(h=conc.top, col="black", lty=2, lwd=2)
###########################
# Checking traceplots for parallel chains ####
col <- rainbow(n.chain)
par(mfrow=c(1,1), mar=rep(2,4))
tmp <- unlist(lapply(s.p, function(x) {x$gamma}))
y.rge <- range(tmp, conc.top)
plot(s.p[[1]]$gamma, type="l", ylim=y.rge, col=col[1])
for (i in 1:n.chain) {
lines(s.p[[i]]$gamma, ylim=y.rge, col=col[[i]])
}
abline(h=conc.top, col="black", lty=2, lwd=2)
par(mfrow=c(1,1), mar=rep(2,4))
tmp <- unlist(lapply(s.p, function(x) {x$alpha}))
y.rge <- range(tmp, dsct.top)
plot(s.p[[1]]$alpha, type="l", ylim=y.rge, col=col[1])
for (i in 1:n.chain) {
lines(s.p[[i]]$alpha, ylim=y.rge, col=col[[i]])
}
abline(h=dsct.top, col="black", lty=2, lwd=2)
source('/mnt/GREENWOOD_JBOD1/GREENWOOD_BACKUP/home/kevin.mcgregor/research/pitman_yor/battiston_sampler/R/b_sampler.R', echo=TRUE)
gc()
source("~/research/pitman_yor/battiston_sampler/R/b_sampler.R")
source("~/research/pitman_yor/basic_py/R/hpy_functions.R")
plot.dir <- "/mnt/GREENWOOD_BACKUP/home/kevin.mcgregor/research/pitman_yor/battiston_sampler/plots/fixed_params"
# Sampling from HPY
N <- 1000
J <- 25
conc.top <- 5
dsct.top <- 0.1
conc.local <- rep(5, J)
dsct.local <- rep(0.3, J)
s.hpy <- sample_hpy(J, rep(N, J), conc.top, dsct.top, conc.local, dsct.local)
Y <- s.hpy$abund
# Prior hyper-params
p.shape = sqrt(5)
p.scale = sqrt(5)
# Running Battiston sampler
s <- b_sampler(Y, 1000, 200, p.shape = p.shape, p.scale = p.scale)
s$theta
source('/mnt/GREENWOOD_JBOD1/GREENWOOD_BACKUP/home/kevin.mcgregor/research/pitman_yor/battiston_sampler/R/b_sampler.R', echo=TRUE)
# Running Battiston sampler
s <- b_sampler(Y, 1000, 200, p.shape = p.shape, p.scale = p.scale)
s$theta
library(parallel)
n.chain <- 4
Y.list <- vector("list", n.chain)
for (i in 1:n.chain) Y.list[[i]] <- Y
s.p <- mclapply(Y.list, b_sampler, p.shape = p.shape, p.scale = p.scale,
n.iter=1000, n.burn=200, mc.cores=1)#n.chain)
par(mfrow=c(5,2), mar=rep(1,4))
for (j in 1:J) {
tmp <- unlist(lapply(s.p, function(x) {x$sigma[,j]}))
y.rge <- range(tmp, dsct.local[j])
plot(s.p[[1]]$sigma[,j], type="l", ylim=y.rge, col=col[1])
for (i in 1:n.chain) {
lines(s.p[[i]]$sigma[,j], ylim=y.rge, col=col[[i]])
abline(h=dsct.local[j], col="black", lty=2, lwd=2)
}
}
###########################
# Checking traceplots for parallel chains ####
col <- rainbow(n.chain)
par(mfrow=c(5,2), mar=rep(1,4))
for (j in 1:J) {
tmp <- unlist(lapply(s.p, function(x) {x$theta[,j]}))
y.rge <- range(tmp, conc.local[j])
plot(s.p[[1]]$theta[,j], type="l", ylim=y.rge, col=col[1])
for (i in 1:n.chain) {
lines(s.p[[i]]$theta[,j], ylim=y.rge, col=col[[i]])
abline(h=conc.local[j], col="black", lty=2, lwd=2)
}
}
par(mfrow=c(5,2), mar=rep(1,4))
for (j in 1:min(10,J)) {
tmp <- unlist(lapply(s.p, function(x) {x$theta[,j]}))
y.rge <- range(tmp, conc.local[j])
plot(s.p[[1]]$theta[,j], type="l", ylim=y.rge, col=col[1])
for (i in 1:n.chain) {
lines(s.p[[i]]$theta[,j], ylim=y.rge, col=col[[i]])
abline(h=conc.local[j], col="black", lty=2, lwd=2)
}
}
source('/mnt/GREENWOOD_JBOD1/GREENWOOD_BACKUP/home/kevin.mcgregor/research/pitman_yor/battiston_sampler/R/b_sampler.R', echo=TRUE)
source('/mnt/GREENWOOD_JBOD1/GREENWOOD_BACKUP/home/kevin.mcgregor/research/pitman_yor/battiston_sampler/R/b_sampler.R', echo=TRUE)
gc()
source("~/research/pitman_yor/battiston_sampler/R/b_sampler.R")
source("~/research/pitman_yor/basic_py/R/hpy_functions.R")
plot.dir <- "/mnt/GREENWOOD_BACKUP/home/kevin.mcgregor/research/pitman_yor/battiston_sampler/plots/fixed_params"
# Sampling from HPY
N <- 1000
J <- 25
conc.top <- 5
dsct.top <- 0.1
conc.local <- rep(5, J)
dsct.local <- rep(0.3, J)
s.hpy <- sample_hpy(J, rep(N, J), conc.top, dsct.top, conc.local, dsct.local)
Y <- s.hpy$abund
# Prior hyper-params
p.shape = sqrt(5)
p.scale = sqrt(5)
# Running Battiston sampler
s <- b_sampler(Y, 1000, 200, p.shape = p.shape, p.scale = p.scale)
library(parallel)
n.chain <- 4
Y.list <- vector("list", n.chain)
for (i in 1:n.chain) Y.list[[i]] <- Y
s.p <- mclapply(Y.list, b_sampler, p.shape = p.shape, p.scale = p.scale,
n.iter=1000, n.burn=200, mc.cores=1)#n.chain)
s.p[[1]]$sigma
s.p[[4]]$sigma
par(mfrow=c(5,2), mar=rep(1,4))
for (j in 1:J) {
tmp <- unlist(lapply(s.p, function(x) {x$sigma[,j]}))
y.rge <- range(tmp, dsct.local[j])
plot(s.p[[1]]$sigma[,j], type="l", ylim=y.rge, col=col[1])
for (i in 1:n.chain) {
lines(s.p[[i]]$sigma[,j], ylim=y.rge, col=col[[i]])
abline(h=dsct.local[j], col="black", lty=2, lwd=2)
}
}
###########################
# Checking traceplots for parallel chains ####
col <- rainbow(n.chain)
par(mfrow=c(5,2), mar=rep(1,4))
for (j in 1:J) {
tmp <- unlist(lapply(s.p, function(x) {x$sigma[,j]}))
y.rge <- range(tmp, dsct.local[j])
plot(s.p[[1]]$sigma[,j], type="l", ylim=y.rge, col=col[1])
for (i in 1:n.chain) {
lines(s.p[[i]]$sigma[,j], ylim=y.rge, col=col[[i]])
abline(h=dsct.local[j], col="black", lty=2, lwd=2)
}
}
for (j in 1:max(10,J)) {
tmp <- unlist(lapply(s.p, function(x) {x$sigma[,j]}))
y.rge <- range(tmp, dsct.local[j])
plot(s.p[[1]]$sigma[,j], type="l", ylim=y.rge, col=col[1])
for (i in 1:n.chain) {
lines(s.p[[i]]$sigma[,j], ylim=y.rge, col=col[[i]])
abline(h=dsct.local[j], col="black", lty=2, lwd=2)
}
}
par(mfrow=c(5,2), mar=rep(1,4))
for (j in 1:max(10,J)) {
tmp <- unlist(lapply(s.p, function(x) {x$sigma[,j]}))
y.rge <- range(tmp, dsct.local[j])
plot(s.p[[1]]$sigma[,j], type="l", ylim=y.rge, col=col[1])
for (i in 1:n.chain) {
lines(s.p[[i]]$sigma[,j], ylim=y.rge, col=col[[i]])
abline(h=dsct.local[j], col="black", lty=2, lwd=2)
}
}
par(mfrow=c(5,2), mar=rep(1,4))
for (j in 1:min(10,J)) {
tmp <- unlist(lapply(s.p, function(x) {x$sigma[,j]}))
y.rge <- range(tmp, dsct.local[j])
plot(s.p[[1]]$sigma[,j], type="l", ylim=y.rge, col=col[1])
for (i in 1:n.chain) {
lines(s.p[[i]]$sigma[,j], ylim=y.rge, col=col[[i]])
abline(h=dsct.local[j], col="black", lty=2, lwd=2)
}
}
source('/mnt/GREENWOOD_JBOD1/GREENWOOD_BACKUP/home/kevin.mcgregor/research/pitman_yor/battiston_sampler/R/b_sampler.R', echo=TRUE)
gc()
source("~/research/pitman_yor/battiston_sampler/R/b_sampler.R")
source("~/research/pitman_yor/basic_py/R/hpy_functions.R")
plot.dir <- "/mnt/GREENWOOD_BACKUP/home/kevin.mcgregor/research/pitman_yor/battiston_sampler/plots/fixed_params"
# Sampling from HPY
N <- 1000
J <- 25
conc.top <- 5
dsct.top <- 0.1
conc.local <- rep(5, J)
dsct.local <- rep(0.3, J)
s.hpy <- sample_hpy(J, rep(N, J), conc.top, dsct.top, conc.local, dsct.local)
Y <- s.hpy$abund
p.shape = sqrt(5)
p.scale = sqrt(5)
# Running Battiston sampler
s <- b_sampler(Y, 1000, 200, p.shape = p.shape, p.scale = p.scale)
library(parallel)
n.chain <- 4
Y.list <- vector("list", n.chain)
for (i in 1:n.chain) Y.list[[i]] <- Y
s.p <- mclapply(Y.list, b_sampler, p.shape = p.shape, p.scale = p.scale,
n.iter=1000, n.burn=200, mc.cores=1)#n.chain)
###########################
# Checking traceplots for parallel chains ####
col <- rainbow(n.chain)
par(mfrow=c(1,1), mar=rep(2,4))
tmp <- unlist(lapply(s.p, function(x) {x$gamma}))
y.rge <- range(tmp, conc.top)
plot(s.p[[1]]$gamma, type="l", ylim=y.rge, col=col[1])
for (i in 1:n.chain) {
lines(s.p[[i]]$gamma, ylim=y.rge, col=col[[i]])
}
abline(h=conc.top, col="black", lty=2, lwd=2)
par(mfrow=c(1,1), mar=rep(2,4))
tmp <- unlist(lapply(s.p, function(x) {x$alpha}))
y.rge <- range(tmp, dsct.top)
plot(s.p[[1]]$alpha, type="l", ylim=y.rge, col=col[1])
for (i in 1:n.chain) {
lines(s.p[[i]]$alpha, ylim=y.rge, col=col[[i]])
}
abline(h=dsct.top, col="black", lty=2, lwd=2)
N <- 1000
J <- 25
conc.top <- 15
dsct.top <- 0.4
conc.local <- rep(5, J)
dsct.local <- rep(0.3, J)
s.hpy <- sample_hpy(J, rep(N, J), conc.top, dsct.top, conc.local, dsct.local)
Y <- s.hpy$abund
library(parallel)
n.chain <- 4
Y.list <- vector("list", n.chain)
for (i in 1:n.chain) Y.list[[i]] <- Y
s.p <- mclapply(Y.list, b_sampler, p.shape = p.shape, p.scale = p.scale,
n.iter=1000, n.burn=200, mc.cores=1)#n.chain)
par(mfrow=c(1,1), mar=rep(2,4))
tmp <- unlist(lapply(s.p, function(x) {x$gamma}))
y.rge <- range(tmp, conc.top)
plot(s.p[[1]]$gamma, type="l", ylim=y.rge, col=col[1])
for (i in 1:n.chain) {
lines(s.p[[i]]$gamma, ylim=y.rge, col=col[[i]])
}
abline(h=conc.top, col="black", lty=2, lwd=2)
par(mfrow=c(1,1), mar=rep(2,4))
tmp <- unlist(lapply(s.p, function(x) {x$alpha}))
y.rge <- range(tmp, dsct.top)
plot(s.p[[1]]$alpha, type="l", ylim=y.rge, col=col[1])
for (i in 1:n.chain) {
lines(s.p[[i]]$alpha, ylim=y.rge, col=col[[i]])
}
abline(h=dsct.top, col="black", lty=2, lwd=2)
# Prior hyper-params
p.shape = 2
p.scale = 20
library(parallel)
n.chain <- 4
Y.list <- vector("list", n.chain)
for (i in 1:n.chain) Y.list[[i]] <- Y
s.p <- mclapply(Y.list, b_sampler, p.shape = p.shape, p.scale = p.scale,
n.iter=1000, n.burn=200, mc.cores=1)#n.chain)
###########################
# Checking traceplots for parallel chains ####
col <- rainbow(n.chain)
par(mfrow=c(1,1), mar=rep(2,4))
tmp <- unlist(lapply(s.p, function(x) {x$gamma}))
y.rge <- range(tmp, conc.top)
plot(s.p[[1]]$gamma, type="l", ylim=y.rge, col=col[1])
for (i in 1:n.chain) {
lines(s.p[[i]]$gamma, ylim=y.rge, col=col[[i]])
}
abline(h=conc.top, col="black", lty=2, lwd=2)
par(mfrow=c(1,1), mar=rep(2,4))
tmp <- unlist(lapply(s.p, function(x) {x$alpha}))
y.rge <- range(tmp, dsct.top)
plot(s.p[[1]]$alpha, type="l", ylim=y.rge, col=col[1])
for (i in 1:n.chain) {
lines(s.p[[i]]$alpha, ylim=y.rge, col=col[[i]])
}
abline(h=dsct.top, col="black", lty=2, lwd=2)
# Prior hyper-params
p.shape = 0.001
p.scale = 1/0.001
# Running parallel chains
library(parallel)
n.chain <- 4
Y.list <- vector("list", n.chain)
for (i in 1:n.chain) Y.list[[i]] <- Y
s.p <- mclapply(Y.list, b_sampler, p.shape = p.shape, p.scale = p.scale,
n.iter=1000, n.burn=200, mc.cores=1)#n.chain)
par(mfrow=c(1,1), mar=rep(2,4))
tmp <- unlist(lapply(s.p, function(x) {x$gamma}))
y.rge <- range(tmp, conc.top)
plot(s.p[[1]]$gamma, type="l", ylim=y.rge, col=col[1])
for (i in 1:n.chain) {
lines(s.p[[i]]$gamma, ylim=y.rge, col=col[[i]])
}
abline(h=conc.top, col="black", lty=2, lwd=2)
par(mfrow=c(1,1), mar=rep(2,4))
tmp <- unlist(lapply(s.p, function(x) {x$alpha}))
y.rge <- range(tmp, dsct.top)
plot(s.p[[1]]$alpha, type="l", ylim=y.rge, col=col[1])
for (i in 1:n.chain) {
lines(s.p[[i]]$alpha, ylim=y.rge, col=col[[i]])
}
abline(h=dsct.top, col="black", lty=2, lwd=2)
N <- 1000
J <- 25
conc.top <- 15
dsct.top <- 0.9
conc.local <- rep(5, J)
dsct.local <- rep(0.3, J)
s.hpy <- sample_hpy(J, rep(N, J), conc.top, dsct.top, conc.local, dsct.local)
Y <- s.hpy$abund
library(parallel)
n.chain <- 4
Y.list <- vector("list", n.chain)
for (i in 1:n.chain) Y.list[[i]] <- Y
s.p <- mclapply(Y.list, b_sampler, p.shape = p.shape, p.scale = p.scale,
n.iter=1000, n.burn=200, mc.cores=1)#n.chain)
par(mfrow=c(1,1), mar=rep(2,4))
tmp <- unlist(lapply(s.p, function(x) {x$gamma}))
y.rge <- range(tmp, conc.top)
plot(s.p[[1]]$gamma, type="l", ylim=y.rge, col=col[1])
for (i in 1:n.chain) {
lines(s.p[[i]]$gamma, ylim=y.rge, col=col[[i]])
}
abline(h=conc.top, col="black", lty=2, lwd=2)
# Prior hyper-params
p.shape = 50
p.scale = 1
# Prior hyper-params
p.shape = 1
p.scale = 50
library(parallel)
n.chain <- 4
Y.list <- vector("list", n.chain)
for (i in 1:n.chain) Y.list[[i]] <- Y
s.p <- mclapply(Y.list, b_sampler, p.shape = p.shape, p.scale = p.scale,
n.iter=1000, n.burn=200, mc.cores=1)#n.chain)
par(mfrow=c(1,1), mar=rep(2,4))
tmp <- unlist(lapply(s.p, function(x) {x$gamma}))
y.rge <- range(tmp, conc.top)
plot(s.p[[1]]$gamma, type="l", ylim=y.rge, col=col[1])
for (i in 1:n.chain) {
lines(s.p[[i]]$gamma, ylim=y.rge, col=col[[i]])
}
abline(h=conc.top, col="black", lty=2, lwd=2)
par(mfrow=c(1,1), mar=rep(2,4))
tmp <- unlist(lapply(s.p, function(x) {x$gamma}))
y.rge <- range(tmp, conc.top)
plot(s.p[[1]]$gamma, type="l", ylim=y.rge, col=col[1])
for (i in 1:n.chain) {
lines(s.p[[i]]$gamma, ylim=y.rge, col=col[[i]])
}
abline(h=conc.top, col="black", lty=2, lwd=2)
par(mfrow=c(1,1), mar=rep(2,4))
tmp <- unlist(lapply(s.p, function(x) {x$alpha}))
y.rge <- range(tmp, dsct.top)
plot(s.p[[1]]$alpha, type="l", ylim=y.rge, col=col[1])
for (i in 1:n.chain) {
lines(s.p[[i]]$alpha, ylim=y.rge, col=col[[i]])
}
abline(h=dsct.top, col="black", lty=2, lwd=2)
N <- 1000
J <- 25
conc.top <- 3
dsct.top <- 0.5
conc.local <- rep(5, J)
dsct.local <- rep(0.3, J)
s.hpy <- sample_hpy(J, rep(N, J), conc.top, dsct.top, conc.local, dsct.local)
Y <- s.hpy$abund
# Prior hyper-params
p.shape = 1
p.scale = 1
library(parallel)
n.chain <- 4
Y.list <- vector("list", n.chain)
for (i in 1:n.chain) Y.list[[i]] <- Y
s.p <- mclapply(Y.list, b_sampler, p.shape = p.shape, p.scale = p.scale,
n.iter=1000, n.burn=200, mc.cores=1)#n.chain)
par(mfrow=c(1,1), mar=rep(2,4))
tmp <- unlist(lapply(s.p, function(x) {x$gamma}))
y.rge <- range(tmp, conc.top)
plot(s.p[[1]]$gamma, type="l", ylim=y.rge, col=col[1])
for (i in 1:n.chain) {
lines(s.p[[i]]$gamma, ylim=y.rge, col=col[[i]])
}
abline(h=conc.top, col="black", lty=2, lwd=2)
mean(s.p[[1]]$gamma)
conc.top
par(mfrow=c(1,1), mar=rep(2,4))
tmp <- unlist(lapply(s.p, function(x) {x$alpha}))
y.rge <- range(tmp, dsct.top)
plot(s.p[[1]]$alpha, type="l", ylim=y.rge, col=col[1])
for (i in 1:n.chain) {
lines(s.p[[i]]$alpha, ylim=y.rge, col=col[[i]])
}
abline(h=dsct.top, col="black", lty=2, lwd=2)
p.scale = 25
library(parallel)
n.chain <- 4
Y.list <- vector("list", n.chain)
for (i in 1:n.chain) Y.list[[i]] <- Y
s.p <- mclapply(Y.list, b_sampler, p.shape = p.shape, p.scale = p.scale,
n.iter=1000, n.burn=200, mc.cores=1)#n.chain)
par(mfrow=c(1,1), mar=rep(2,4))
tmp <- unlist(lapply(s.p, function(x) {x$gamma}))
y.rge <- range(tmp, conc.top)
plot(s.p[[1]]$gamma, type="l", ylim=y.rge, col=col[1])
for (i in 1:n.chain) {
lines(s.p[[i]]$gamma, ylim=y.rge, col=col[[i]])
}
abline(h=conc.top, col="black", lty=2, lwd=2)
par(mfrow=c(1,1), mar=rep(2,4))
tmp <- unlist(lapply(s.p, function(x) {x$alpha}))
y.rge <- range(tmp, dsct.top)
plot(s.p[[1]]$alpha, type="l", ylim=y.rge, col=col[1])
for (i in 1:n.chain) {
lines(s.p[[i]]$alpha, ylim=y.rge, col=col[[i]])
}
abline(h=dsct.top, col="black", lty=2, lwd=2)
# Prior hyper-params
p.shape = 25
p.scale = 1
library(parallel)
n.chain <- 4
Y.list <- vector("list", n.chain)
for (i in 1:n.chain) Y.list[[i]] <- Y
s.p <- mclapply(Y.list, b_sampler, p.shape = p.shape, p.scale = p.scale,
n.iter=1000, n.burn=200, mc.cores=1)#n.chain)
par(mfrow=c(1,1), mar=rep(2,4))
tmp <- unlist(lapply(s.p, function(x) {x$gamma}))
y.rge <- range(tmp, conc.top)
plot(s.p[[1]]$gamma, type="l", ylim=y.rge, col=col[1])
for (i in 1:n.chain) {
lines(s.p[[i]]$gamma, ylim=y.rge, col=col[[i]])
}
abline(h=conc.top, col="black", lty=2, lwd=2)
par(mfrow=c(1,1), mar=rep(2,4))
tmp <- unlist(lapply(s.p, function(x) {x$alpha}))
y.rge <- range(tmp, dsct.top)
plot(s.p[[1]]$alpha, type="l", ylim=y.rge, col=col[1])
for (i in 1:n.chain) {
lines(s.p[[i]]$alpha, ylim=y.rge, col=col[[i]])
}
abline(h=dsct.top, col="black", lty=2, lwd=2)
# Prior hyper-params
p.shape = 25
p.scale = 25
library(parallel)
n.chain <- 4
Y.list <- vector("list", n.chain)
for (i in 1:n.chain) Y.list[[i]] <- Y
s.p <- mclapply(Y.list, b_sampler, p.shape = p.shape, p.scale = p.scale,
n.iter=1000, n.burn=200, mc.cores=1)#n.chain)
par(mfrow=c(1,1), mar=rep(2,4))
tmp <- unlist(lapply(s.p, function(x) {x$gamma}))
y.rge <- range(tmp, conc.top)
plot(s.p[[1]]$gamma, type="l", ylim=y.rge, col=col[1])
for (i in 1:n.chain) {
lines(s.p[[i]]$gamma, ylim=y.rge, col=col[[i]])
}
abline(h=conc.top, col="black", lty=2, lwd=2)
par(mfrow=c(1,1), mar=rep(2,4))
tmp <- unlist(lapply(s.p, function(x) {x$alpha}))
y.rge <- range(tmp, dsct.top)
plot(s.p[[1]]$alpha, type="l", ylim=y.rge, col=col[1])
for (i in 1:n.chain) {
lines(s.p[[i]]$alpha, ylim=y.rge, col=col[[i]])
}
abline(h=dsct.top, col="black", lty=2, lwd=2)
